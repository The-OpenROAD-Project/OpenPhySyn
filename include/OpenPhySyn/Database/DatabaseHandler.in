// BSD 3-Clause License

// Copyright (c) 2019, SCALE Lab, Brown University
// All rights reserved.

// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:

// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.

// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.

// * Neither the name of the copyright holder nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

virtual std::vector<InstanceTerm*> inputPins(Instance* inst) const;
virtual std::vector<InstanceTerm*> outputPins(Instance* inst) const;
virtual std::vector<InstanceTerm*> filterPins(std::vector<InstanceTerm*>& terms,
                                              PinDirection* direction) const;
virtual std::vector<InstanceTerm*> fanoutPins(Net* net) const;
virtual std::vector<Instance*>     fanoutInstances(Net* net) const;
virtual std::vector<InstanceTerm*> levelDriverPins() const;
virtual std::vector<Instance*>     driverInstances() const;
virtual InstanceTerm*              faninPin(Net* net) const;
virtual std::vector<InstanceTerm*> pins(Net* net) const;
virtual std::vector<InstanceTerm*> pins(Instance* inst) const;
virtual Net*                       net(InstanceTerm* term) const;
virtual std::vector<InstanceTerm*> connectedPins(Net* net) const;
virtual std::set<BlockTerm*>       clockPins() const;
virtual Point                      location(InstanceTerm* term);
virtual Point                      location(Instance* inst);
virtual float                      area(Instance* inst);
virtual float                      area();
virtual void                       setLocation(Instance* inst, Point pt);
virtual LibraryTerm*               libraryPin(InstanceTerm* term) const;
virtual LibraryCell*               libraryCell(InstanceTerm* term) const;
virtual LibraryCell*               libraryCell(Instance* inst) const;
virtual LibraryCell*               libraryCell(const char* name) const;
virtual LibraryCell*               largestLibraryCell(LibraryCell* cell);
virtual double                     dbuToMeters(uint dist) const;
virtual bool                       isPlaced(InstanceTerm* term) const;
virtual bool                       isPlaced(Instance* inst) const;
virtual bool                       isDriver(InstanceTerm* term) const;
virtual Instance*                  instance(InstanceTerm* term) const;
virtual Instance*                  instance(const char* name) const;
virtual float                      pinCapacitance(InstanceTerm* term) const;
virtual float                      pinCapacitance(LibraryTerm* term) const;
virtual float                      maxLoad(LibraryCell* cell);
virtual float                      targetLoad(LibraryCell* cell);
virtual float                      maxLoad(LibraryTerm* term);
virtual Net*                       net(const char* name) const;
virtual LibraryTerm*               libraryPin(const char* cell_name,
                                              const char* pin_name) const;
virtual LibraryTerm*  libraryPin(LibraryCell* cell, const char* pin_name) const;
virtual bool          isClocked(InstanceTerm* term) const;
virtual bool          isPrimary(Net* net) const;
virtual bool          isInput(InstanceTerm* term) const;
virtual bool          isOutput(InstanceTerm* term) const;
virtual bool          isAnyInput(InstanceTerm* term) const;
virtual bool          isAnyOutput(InstanceTerm* term) const;
virtual bool          isBiDriect(InstanceTerm* term) const;
virtual bool          isTriState(InstanceTerm* term) const;
virtual bool          isInput(LibraryTerm* term) const;
virtual bool          isOutput(LibraryTerm* term) const;
virtual bool          isAnyInput(LibraryTerm* term) const;
virtual bool          isAnyOutput(LibraryTerm* term) const;
virtual bool          isBiDriect(LibraryTerm* term) const;
virtual bool          isTriState(LibraryTerm* term) const;
virtual bool          hasMaxCapViolation(InstanceTerm* term) const;
virtual Instance*     createInstance(const char* inst_name, LibraryCell* cell);
virtual Net*          createNet(const char* net_name);
virtual void          connect(Net* net, InstanceTerm* term) const;
virtual InstanceTerm* connect(Net* net, Instance* inst,
                              LibraryTerm* port) const;
virtual void          disconnect(InstanceTerm* term) const;
virtual int           disconnectAll(Net* net) const;
virtual void          del(Net* net) const;
virtual void          clear() const;
virtual unsigned int  fanoutCount(Net* net) const;
bool                  dontUse(LibraryCell* cell) const;
virtual std::vector<Net*>  nets() const;
virtual Block*             top() const;
virtual Library*           library() const;
virtual LibraryTechnology* technology() const;
virtual std::string        name(Block* object) const;
virtual std::string        name(Net* object) const;
virtual std::string        name(Instance* object) const;
virtual std::string        name(BlockTerm* object) const;
virtual std::string        name(Library* object) const;
virtual std::string        name(LibraryCell* object) const;
virtual std::string        name(LibraryTerm* object) const;
virtual std::string        topName() const;
